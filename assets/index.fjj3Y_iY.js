import{i as o}from"./index.DtFH3NPX.js";var l;(function(n){n[n.Audio=1]="Audio",n[n.Cache=2]="Cache",n[n.Config=3]="Config",n[n.Data=4]="Data",n[n.LocalData=5]="LocalData",n[n.Document=6]="Document",n[n.Download=7]="Download",n[n.Picture=8]="Picture",n[n.Public=9]="Public",n[n.Video=10]="Video",n[n.Resource=11]="Resource",n[n.Temp=12]="Temp",n[n.AppConfig=13]="AppConfig",n[n.AppData=14]="AppData",n[n.AppLocalData=15]="AppLocalData",n[n.AppCache=16]="AppCache",n[n.AppLog=17]="AppLog",n[n.Desktop=18]="Desktop",n[n.Executable=19]="Executable",n[n.Font=20]="Font",n[n.Home=21]="Home",n[n.Runtime=22]="Runtime",n[n.Template=23]="Template"})(l||(l={}));var t;(function(n){n[n.Start=0]="Start",n[n.Current=1]="Current",n[n.End=2]="End"})(t||(t={}));async function m(n,f){if(n instanceof URL&&n.protocol!=="file:")throw new TypeError("Must be a file URL.");const p=await o("plugin:fs|read_text_file",{path:n instanceof URL?n.toString():n,options:f}),u=p instanceof ArrayBuffer?p:Uint8Array.from(p);return new TextDecoder().decode(u)}async function A(n,f,p){if(n instanceof URL&&n.protocol!=="file:")throw new TypeError("Must be a file URL.");const u=new TextEncoder;await o("plugin:fs|write_text_file",u.encode(f),{headers:{path:encodeURIComponent(n instanceof URL?n.toString():n),options:JSON.stringify(p)}})}export{l as BaseDirectory,t as SeekMode,m as readTextFile,A as writeTextFile};
